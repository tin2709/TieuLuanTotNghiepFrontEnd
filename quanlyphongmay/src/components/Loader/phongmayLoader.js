// src/components/Loader/phongmayLoader.js

// REMOVED: import { BROKEN_STATUS } from '../components/action'; // KH√îNG C·∫¶N C√ÅI N√ÄY TRONG LOADER
// import { notification } from 'antd'; // Ant Design notification (will be used in component, not loader directly, but good to note)

/**
 * Loader function cho route /phongmay.
 * Fetch d·ªØ li·ªáu danh s√°ch ph√≤ng m√°y t·ª´ API, c√≥ ph√¢n bi·ªát quy·ªÅn ng∆∞·ªùi d√πng.
 * Th√™m fetch d·ªØ li·ªáu ghi ch√∫ m√°y t√≠nh h·ªèng v√† thi·∫øt b·ªã h·ªèng.
 * KH√îNG throw l·ªói, thay v√†o ƒë√≥ tr·∫£ v·ªÅ object:
 * - Th√†nh c√¥ng: { data: { labRooms: [...], computerNotes: [...], deviceNotes: [...] } }
 * - Th·∫•t b·∫°i: { error: true, type: 'auth' | 'api' | 'network', message: '...', status?: number }
 */
export async function labManagementLoader() {
    console.log("‚ö°Ô∏è [Loader] Running labManagementLoader (with broken notes fetch)...");
    const token = localStorage.getItem("authToken");
    const userRole = localStorage.getItem("userRole");
    const username = localStorage.getItem("username");

    // 1. Ki·ªÉm tra Token
    if (!token) {
        console.warn("üîí [Loader] No token found. Returning auth error signal.");
        return {
            error: true,
            type: 'auth',
            message: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'
        };
    }

    let labRoomsData = [];
    let computerNotes = []; // Kh·ªüi t·∫°o m·∫£ng r·ªóng
    let deviceNotes = [];   // Kh·ªüi t·∫°o m·∫£ng r·ªóng

    // --- Fetch Lab Rooms Data (Logic remains the same as before) ---
    try {
        let labRoomsUrl;
        if (userRole === '2') { // N·∫øu userRole l√† 2 (Teacher)
            if (!username) {
                console.error("‚ùå [Loader] User role is 2 but username not found in localStorage.");
                return {
                    error: true,
                    type: 'auth',
                    message: 'Kh√¥ng t√¨m th·∫•y t√™n ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'
                };
            }
            labRoomsUrl = `https://localhost:8080/DSCaThucHanhTheoGiaoVienTen?hoTenGiaoVien=${encodeURIComponent(username)}&token=${token}`;
            console.log(`üìû [Loader] Fetching for Teacher (userRole 2): ${labRoomsUrl}`);

            const response = await fetch(labRoomsUrl);

            if (!response.ok) {
                console.error(`‚ùå [Loader] API Error for Teacher: ${response.status} ${response.statusText}`);
                let errorMsg = `L·ªói ${response.status}: Kh√¥ng th·ªÉ t·∫£i danh s√°ch ca th·ª±c h√†nh cho gi√°o vi√™n.`;
                try {
                    const apiError = await response.json();
                    errorMsg = apiError.message || errorMsg;
                } catch (e) {
                    console.warn("[Loader] Could not parse error response body as JSON for teacher API.");
                }
                return {
                    error: true,
                    type: 'api',
                    status: response.status,
                    message: errorMsg
                };
            }

            if (response.status === 204) {
                console.log("‚úÖ [Loader] Received 204 No Content for Teacher API. Returning empty data.");
                labRoomsData = [];
            } else {
                const caThucHanhList = await response.json();
                const uniquePhongMayMap = new Map();
                caThucHanhList.forEach(ca => {
                    if (ca.phongMay && !uniquePhongMayMap.has(ca.phongMay.maPhong)) {
                        uniquePhongMayMap.set(ca.phongMay.maPhong, ca.phongMay);
                    }
                });
                labRoomsData = Array.from(uniquePhongMayMap.values());
            }

        } else { // N·∫øu userRole l√† 3 ho·∫∑c b·∫•t k·ª≥ vai tr√≤ n√†o kh√°c (Admin, Staff, etc.)
            labRoomsUrl = `https://localhost:8080/DSPhongMay?token=${token}`;
            console.log(`üìû [Loader] Fetching for Admin/Other (userRole ${userRole}): ${labRoomsUrl}`);

            const response = await fetch(labRoomsUrl);

            if (!response.ok) {
                console.error(`‚ùå [Loader] API Error for Admin/Other: ${response.status} ${response.statusText}`);
                let errorMsg = `L·ªói ${response.status}: Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng m√°y.`;
                try {
                    const apiError = await response.json();
                    errorMsg = apiError.message || errorMsg;
                } catch (e) {
                    console.warn("[Loader] Could not parse error response body as JSON for DSPhongMay API.");
                }
                return {
                    error: true,
                    type: 'api',
                    status: response.status,
                    message: errorMsg
                };
            }

            if (response.status === 204) {
                console.log("‚úÖ [Loader] Received 204 No Content for DSPhongMay. Returning empty data.");
                labRoomsData = [];
            } else {
                labRoomsData = await response.json();
            }
        }
    } catch (error) {
        console.error("üí• [Loader] Network or other fetch error for main lab rooms data:", error);
        return {
            error: true,
            type: 'network',
            message: "L·ªói m·∫°ng ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß khi t·∫£i danh s√°ch ph√≤ng m√°y. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i."
        };
    }

    // --- Fetch Broken Notes Data (Computer) ---
    // Endpoint: @GetMapping("/DSGhiChuMayTinh")
    try {
        const computerNotesUrl = `https://localhost:8080/DSGhiChuMayTinh?token=${token}`;
        console.log(`üìû [Loader] Fetching computer notes: ${computerNotesUrl}`);
        const response = await fetch(computerNotesUrl);
        if (response.ok && response.status !== 204) {
            computerNotes = await response.json();
            console.log("‚úÖ [Loader] Computer notes fetched successfully.");
        } else {
            console.warn(`‚ö†Ô∏è [Loader] No computer notes or error (${response.status}) from API.`);
        }
    } catch (error) {
        console.error("üí• [Loader] Network or other fetch error for computer notes:", error);
        // Kh√¥ng block loader ch√≠nh, ch·ªâ log l·ªói v√† tr·∫£ v·ªÅ m·∫£ng r·ªóng cho computerNotes
    }

    // --- Fetch Broken Notes Data (Device) ---
    // Endpoint: @GetMapping("/DSGhiChuThietBi")
    try {
        const deviceNotesUrl = `https://localhost:8080/DSGhiChuThietBi?token=${token}`;
        console.log(`üìû [Loader] Fetching device notes: ${deviceNotesUrl}`);
        const response = await fetch(deviceNotesUrl);
        if (response.ok && response.status !== 204) {
            deviceNotes = await response.json();
            console.log("‚úÖ [Loader] Device notes fetched successfully.");
        } else {
            console.warn(`‚ö†Ô∏è [Loader] No device notes or error (${response.status}) from API.`);
        }
    } catch (error) {
        console.error("üí• [Loader] Network or other fetch error for device notes:", error);
        // Kh√¥ng block loader ch√≠nh, ch·ªâ log l·ªói v√† tr·∫£ v·ªÅ m·∫£ng r·ªóng cho deviceNotes
    }

    // Return combined data
    return {
        data: {
            labRooms: labRoomsData,
            computerNotes: computerNotes,
            deviceNotes: deviceNotes
        }
    };
}