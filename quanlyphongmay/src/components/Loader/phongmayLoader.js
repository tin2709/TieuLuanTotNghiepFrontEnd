// src/loaders/phongMayLoader.js

/**
 * Loader function cho route /phongmay.
 * Fetch d·ªØ li·ªáu danh s√°ch ph√≤ng m√°y t·ª´ API, c√≥ ph√¢n bi·ªát quy·ªÅn ng∆∞·ªùi d√πng.
 * KH√îNG throw l·ªói, thay v√†o ƒë√≥ tr·∫£ v·ªÅ object:
 * - Th√†nh c√¥ng: { data: [...] } ho·∫∑c { data: [] } (cho 204 No Content)
 * - Th·∫•t b·∫°i: { error: true, type: 'auth' | 'api' | 'network', message: '...', status?: number }
 */
export async function labManagementLoader() {
    console.log("‚ö°Ô∏è [Loader] Running labManagementLoader from separate file (No Throw Mode)...");
    const token = localStorage.getItem("authToken");
    // L·∫•y th√¥ng tin quy·ªÅn v√† username t·ª´ localStorage
    const userRole = localStorage.getItem("userRole"); // Gi·∫£ ƒë·ªãnh 'userRole' ƒë∆∞·ª£c l∆∞u trong localStorage
    const username = localStorage.getItem("username"); // Gi·∫£ ƒë·ªãnh 'username' ƒë∆∞·ª£c l∆∞u trong localStorage

    // 1. Ki·ªÉm tra Token
    if (!token) {
        console.warn("üîí [Loader] No token found. Returning auth error signal.");
        // Tr·∫£ v·ªÅ object l·ªói x√°c th·ª±c
        return {
            error: true,
            type: 'auth',
            message: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'
        };
    }

    let url;
    let data;

    // 2. G·ªçi API d·ª±a tr√™n quy·ªÅn ng∆∞·ªùi d√πng
    try {
        if (userRole === '2') { // N·∫øu userRole l√† 2 (Teacher)
            if (!username) {
                console.error("‚ùå [Loader] User role is 2 but username not found in localStorage.");
                return {
                    error: true,
                    type: 'auth',
                    message: 'Kh√¥ng t√¨m th·∫•y t√™n ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'
                };
            }
            url = `https://localhost:8080/DSCaThucHanhTheoGiaoVienTen?hoTenGiaoVien=${encodeURIComponent(username)}&token=${token}`;
            console.log(`üìû [Loader] Fetching for Teacher (userRole 2): ${url}`);

            const response = await fetch(url);

            if (!response.ok) {
                console.error(`‚ùå [Loader] API Error for Teacher: ${response.status} ${response.statusText}`);
                let errorMsg = `L·ªói ${response.status}: Kh√¥ng th·ªÉ t·∫£i danh s√°ch ca th·ª±c h√†nh cho gi√°o vi√™n.`;
                try {
                    const apiError = await response.json();
                    errorMsg = apiError.message || errorMsg;
                } catch (e) {
                    console.warn("[Loader] Could not parse error response body as JSON for teacher API.");
                }
                return {
                    error: true,
                    type: 'api',
                    status: response.status,
                    message: errorMsg
                };
            }

            if (response.status === 204) {
                console.log("‚úÖ [Loader] Received 204 No Content for Teacher API. Returning empty data.");
                data = [];
            } else {
                const caThucHanhList = await response.json();
                console.log("‚úÖ [Loader] CaThucHanh data fetched successfully for teacher.");

                // Tr√≠ch xu·∫•t v√† lo·∫°i b·ªè tr√πng l·∫∑p c√°c ph√≤ng m√°y
                const uniquePhongMayMap = new Map(); // D√πng Map ƒë·ªÉ l∆∞u tr·ªØ unique phongMay theo maPhong
                caThucHanhList.forEach(ca => {
                    if (ca.phongMay && !uniquePhongMayMap.has(ca.phongMay.maPhong)) {
                        uniquePhongMayMap.set(ca.phongMay.maPhong, ca.phongMay);
                    }
                });
                data = Array.from(uniquePhongMayMap.values()); // Chuy·ªÉn c√°c gi√° tr·ªã c·ªßa Map th√†nh m·∫£ng
            }

        } else { // N·∫øu userRole l√† 3 ho·∫∑c b·∫•t k·ª≥ vai tr√≤ n√†o kh√°c (Admin, Staff, etc.)
            url = `https://localhost:8080/DSPhongMay?token=${token}`;
            console.log(`üìû [Loader] Fetching for Admin/Other (userRole ${userRole}): ${url}`);

            const response = await fetch(url);

            if (!response.ok) {
                console.error(`‚ùå [Loader] API Error for Admin/Other: ${response.status} ${response.statusText}`);
                let errorMsg = `L·ªói ${response.status}: Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng m√°y.`;
                try {
                    const apiError = await response.json();
                    errorMsg = apiError.message || errorMsg;
                } catch (e) {
                    console.warn("[Loader] Could not parse error response body as JSON for DSPhongMay API.");
                }
                return {
                    error: true,
                    type: 'api',
                    status: response.status,
                    message: errorMsg
                };
            }

            if (response.status === 204) {
                console.log("‚úÖ [Loader] Received 204 No Content for DSPhongMay. Returning empty data.");
                data = [];
            } else {
                data = await response.json();
                console.log("‚úÖ [Loader] Data fetched successfully for Admin/Other.");
            }
        }

        // 3. Tr·∫£ v·ªÅ d·ªØ li·ªáu th√†nh c√¥ng
        return { data: data };

    } catch (error) {
        // 4. X·ª≠ l√Ω l·ªói m·∫°ng ho·∫∑c l·ªói JavaScript kh√°c trong qu√° tr√¨nh fetch
        console.error("üí• [Loader] Network or other fetch error:", error);
        // Tr·∫£ v·ªÅ object l·ªói m·∫°ng/chung
        return {
            error: true,
            type: 'network',
            message: "L·ªói m·∫°ng ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i."
        };
    }
}

// export async function anotherLoader() { ... }