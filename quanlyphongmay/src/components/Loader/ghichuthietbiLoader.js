
export async function ghichuthietbiLoader() {
    console.log("‚ö°Ô∏è [Loader] Running ghichuthietbiLoader...");
    const token = localStorage.getItem("authToken");

    // 1. Check Token
    if (!token) {
        console.warn("üîí [Loader] No token found. Returning auth error signal.");
        return {
            error: true,
            type: 'auth',
            message: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'
        };
    }

    // 2. Call API DSTang
    try {
        const url = `https://localhost:8080/DSGhiChuThietBi?token=${token}`; // Updated API URL
        console.log(`üìû [Loader] Fetching: ${url}`);
        const response = await fetch(url);

        // 3. X·ª≠ l√Ω Response L·ªói API (!response.ok)
        if (!response.ok) {
            console.error(`‚ùå [Loader] API Error: ${response.status} ${response.statusText}`);
            let errorMsg = `L·ªói ${response.status}: Kh√¥ng th·ªÉ t·∫£i danh s√°ch ghi ch√∫ m√°y t√≠nh.`; // Updated message
            try {
                const apiError = await response.json();
                errorMsg = apiError.message || errorMsg;
            } catch (e) {
                console.warn("[Loader] Could not parse error response body as JSON.");
            }
            return {
                error: true,
                type: 'api',
                status: response.status,
                message: errorMsg
            };
        }

        // 4. X·ª≠ l√Ω th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ d·ªØ li·ªáu (204 No Content)
        if (response.status === 204) {
            console.log("‚úÖ [Loader] Received 204 No Content. Returning empty data.");
            return { data: [] };
        }

        // 5. X·ª≠ l√Ω th√†nh c√¥ng c√≥ d·ªØ li·ªáu (200 OK)
        const data = await response.json();
        console.log("‚úÖ [Loader] Data fetched successfully.");
        return { data: data || [] }; // Return data directly, assuming API returns array

    } catch (error) {
        // 6. X·ª≠ l√Ω l·ªói m·∫°ng ho·∫∑c l·ªói JavaScript kh√°c
        console.error("üí• [Loader] Network or other fetch error:", error);
        return {
            error: true,
            type: 'network',
            message: "L·ªói m·∫°ng ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i."
        };
    }
}