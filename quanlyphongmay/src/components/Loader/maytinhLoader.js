// src/components/Loader/maytinhLoader.js

/**
 * Loader function cho route /maytinh.
 * Fetch d·ªØ li·ªáu danh s√°ch m√°y t√≠nh v√† ghi ch√∫ m√°y t√≠nh t·ª´ API.
 * KH√îNG throw l·ªói, thay v√†o ƒë√≥ tr·∫£ v·ªÅ object:
 * - Th√†nh c√¥ng: { data: { mayTinhs: [...], ghiChuMayTinhs: [...] } }
 * - Th·∫•t b·∫°i: { error: true, type: 'auth' | 'api' | 'network', message: '...', status?: number }
 */
export async function maytinhLoader() {
    console.log("‚ö°Ô∏è [Loader] Running maytinhLoader (with ghiChuMayTinh fetch)...");
    const token = localStorage.getItem("authToken");

    // 1. Ki·ªÉm tra Token
    if (!token) {
        console.warn("üîí [Loader] No token found. Returning auth error signal.");
        return {
            error: true,
            type: 'auth',
            message: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'
        };
    }

    let mayTinhData = [];
    let ghiChuMayTinhData = []; // Bi·∫øn m·ªõi ƒë·ªÉ l∆∞u d·ªØ li·ªáu ghi ch√∫

    // 2. G·ªçi API DSMayTinh
    try {
        const urlMayTinh = `https://localhost:8080/DSMayTinh?token=${token}`;
        console.log(`üìû [Loader] Fetching DSMayTinh: ${urlMayTinh}`);
        const responseMayTinh = await fetch(urlMayTinh);

        if (!responseMayTinh.ok) {
            console.error(`‚ùå [Loader] API Error DSMayTinh: ${responseMayTinh.status} ${responseMayTinh.statusText}`);
            let errorMsg = `L·ªói ${responseMayTinh.status}: Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√°y t√≠nh.`;
            try {
                const apiError = await responseMayTinh.json();
                errorMsg = apiError.message || errorMsg;
            } catch (e) {
                console.warn("[Loader] Could not parse error response body as JSON for DSMayTinh.");
            }
            return {
                error: true,
                type: 'api',
                status: responseMayTinh.status,
                message: errorMsg
            };
        }

        if (responseMayTinh.status === 204) {
            console.log("‚úÖ [Loader] Received 204 No Content for DSMayTinh. Returning empty data.");
            mayTinhData = [];
        } else {
            mayTinhData = await responseMayTinh.json();
            console.log("‚úÖ [Loader] DSMayTinh data fetched successfully.");
        }

    } catch (error) {
        console.error("üí• [Loader] Network or other fetch error for DSMayTinh data:", error);
        return {
            error: true,
            type: 'network',
            message: "L·ªói m·∫°ng ho·∫∑c kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß khi t·∫£i danh s√°ch m√°y t√≠nh."
        };
    }

    // 3. G·ªçi API DSGhiChuMayTinh (b·ªï sung)
    try {
        const urlGhiChu = `https://localhost:8080/DSGhiChuMayTinh?token=${token}`;
        console.log(`üìû [Loader] Fetching DSGhiChuMayTinh: ${urlGhiChu}`);
        const responseGhiChu = await fetch(urlGhiChu);

        if (responseGhiChu.ok && responseGhiChu.status !== 204) {
            ghiChuMayTinhData = await responseGhiChu.json();
            console.log("‚úÖ [Loader] DSGhiChuMayTinh data fetched successfully.");
        } else {
            console.warn(`‚ö†Ô∏è [Loader] No DSGhiChuMayTinh data or error (${responseGhiChu.status}) from API.`);
        }
    } catch (error) {
        console.error("üí• [Loader] Network or other fetch error for DSGhiChuMayTinh data:", error);
        // Kh√¥ng ch·∫∑n loader ch√≠nh, ch·ªâ log l·ªói v√† tr·∫£ v·ªÅ m·∫£ng r·ªóng cho ghi ch√∫
    }

    // 4. Tr·∫£ v·ªÅ c·∫£ hai lo·∫°i d·ªØ li·ªáu
    return {
        data: {
            mayTinhs: mayTinhData || [],
            ghiChuMayTinhs: ghiChuMayTinhData || []
        }
    };
}