// src/loaders/adminLoaders.js

/**
 * Fetches data for a specific dashboard piece.
 * NEVER throws, always returns an object:
 * - Success: { data: [...] | any }
 * - Failure: { error: true, type: 'api' | 'network', message: '...', status?: number }
 */
const fetchDashboardPiece = async (endpoint, token) => {
    // Kh√¥ng c·∫ßn ki·ªÉm tra token ·ªü ƒë√¢y v√¨ loader ch√≠nh ƒë√£ l√†m
    console.log(`üß© [fetchDashboardPiece] Fetching: ${endpoint}`);
    const url = `https://localhost:8080/${endpoint}?token=${token}`;

    try {
        const response = await fetch(url, { method: 'GET', headers: { 'Content-Type': 'application/json' } });

        // X·ª≠ l√Ω l·ªói API (!response.ok)
        if (!response.ok) {
            let statusText = response.statusText;
            let responseBodyError = null;
            try {
                // C·ªë g·∫Øng ƒë·ªçc body l·ªói ƒë·ªÉ l·∫•y message chi ti·∫øt h∆°n
                responseBodyError = await response.text(); // ƒê·ªçc text tr∆∞·ªõc
                const apiError = JSON.parse(responseBodyError); // R·ªìi th·ª≠ parse JSON
                statusText = apiError.message || statusText; // ∆Øu ti√™n message t·ª´ API
            } catch (e) {
                // Kh√¥ng parse ƒë∆∞·ª£c JSON, s·ª≠ d·ª•ng text n·∫øu c√≥, ho·∫∑c statusText m·∫∑c ƒë·ªãnh
                statusText = responseBodyError || statusText;
                console.warn(`[fetchDashboardPiece] Could not parse error JSON for ${endpoint}. Raw body: ${responseBodyError}`);
            }
            const errorMsg = `L·ªói ${response.status} (${endpoint}): ${statusText}`;
            console.error(`‚ùå [fetchDashboardPiece] API Error (${endpoint}): ${response.status} ${statusText}`);
            return {
                error: true,
                type: 'api',
                status: response.status,
                message: errorMsg
            };
        }

        // X·ª≠ l√Ω 204 No Content (n·∫øu c√≥)
        if (response.status === 204) {
            console.log(`‚úÖ [fetchDashboardPiece] Received 204 No Content for ${endpoint}. Returning empty array.`);
            // Tr·∫£ v·ªÅ m·∫£ng r·ªóng v√¨ th∆∞·ªùng c√°c endpoint n√†y tr·∫£ v·ªÅ danh s√°ch
            return { data: [] };
        }

        // X·ª≠ l√Ω th√†nh c√¥ng (200 OK)
        const data = await response.json();
        console.log(`‚úÖ [fetchDashboardPiece] Data fetched successfully for ${endpoint}.`);

        // ƒê·∫£m b·∫£o ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ l√† m·∫£ng cho c√°c endpoint danh s√°ch
        if (endpoint.startsWith('DS') && !Array.isArray(data)) {
            console.warn(`[fetchDashboardPiece] Expected array for ${endpoint} but got other type. Returning empty array.`);
            return { data: [] };
        }
        // C√°c endpoint th·ªëng k√™ c√≥ th·ªÉ tr·∫£ v·ªÅ object ho·∫∑c m·∫£ng, gi·ªØ nguy√™n data
        return { data: data };

    } catch (error) {
        // X·ª≠ l√Ω l·ªói m·∫°ng ho·∫∑c l·ªói JS kh√°c
        console.error(`üí• [fetchDashboardPiece] Network/Fetch error for ${endpoint}:`, error);
        let errorType = 'network';
        let errorMessage = `L·ªói m·∫°ng (${endpoint}): ${error.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi.'}`;

        // Ki·ªÉm tra c·ª• th·ªÉ l·ªói "Failed to fetch"
        if (error.message.toLowerCase().includes('failed to fetch')) {
            errorMessage = `L·ªói m·∫°ng ho·∫∑c CORS (${endpoint}). Ki·ªÉm tra k·∫øt n·ªëi, server backend, CORS/HTTPS.`;
        } else if (error instanceof SyntaxError) {
            // L·ªói n·∫øu JSON tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá (d√π response.ok l√† true)
            errorType = 'api'; // Coi nh∆∞ l·ªói API
            errorMessage = `L·ªói ph√¢n t√≠ch d·ªØ li·ªáu JSON (${endpoint}): D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá.`;
            console.error(`üí• [fetchDashboardPiece] JSON Syntax error for ${endpoint}:`, error);
        }

        return {
            error: true,
            type: errorType,
            message: errorMessage
        };
    }
}; // <-- K·∫æT TH√öC ƒê·ªäNH NGHƒ®A fetchDashboardPiece


// --- H√†m Loader ch√≠nh ---
export async function adminDashboardLoader() {
    console.log("‚ö°Ô∏è [Loader] Running adminDashboardLoader (No Throw Mode)...");
    const token = localStorage.getItem("authToken");

    // 1. Check Token (Gi·ªëng maytinhLoader)
    if (!token) {
        console.warn("üîí [Loader] No token found. Returning auth error signal.");
        return {
            error: true,
            type: 'auth',
            message: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.'
        };
    }
    console.log("üîë [Loader] Token found. Proceeding to fetch data.");

    // 2. ƒê·ªãnh nghƒ©a c√°c "m·∫£nh" d·ªØ li·ªáu c·∫ßn fetch
    const dataPieces = {
        roomStats: 'phong-may-thong-ke',
        timeSeriesData: 'thong-ke-may-tinh-theo-thoi-gian',
        buildings: 'DSToaNha',
        floors: 'DSTang',
        rooms: 'DSPhongMay'
    };

    // 3. G·ªçi API song song cho t·ª´ng m·∫£nh s·ª≠ d·ª•ng helper "kh√¥ng n√©m l·ªói"
    try {
        const promises = Object.entries(dataPieces).map(([key, endpoint]) =>
            // G·ªçi helper ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü tr√™n
            fetchDashboardPiece(endpoint, token).then(result => ({ key, result }))
        );

        // Ch·ªù t·∫•t c·∫£ c√°c promise ho√†n th√†nh (m·ªói promise s·∫Ω resolve th√†nh { key, result })
        const resultsArray = await Promise.all(promises);

        console.log("üì° [Loader] All data pieces processed. Results:", resultsArray);

        // 4. X·ª≠ l√Ω k·∫øt qu·∫£ t·ªïng h·ª£p
        const finalLoaderData = {};
        const collectedErrors = [];
        let overallSuccess = true; // Gi·∫£ ƒë·ªãnh th√†nh c√¥ng ban ƒë·∫ßu

        resultsArray.forEach(({ key, result }) => {
            if (result.error) {
                console.error(`‚ùå [Loader] Error fetching piece "${key}":`, result.message);
                // T·∫°o th√¥ng ƒëi·ªáp l·ªói r√µ r√†ng h∆°n
                collectedErrors.push(`[${key}]: ${result.message}`);
                // G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh (m·∫£ng r·ªóng) cho ph·∫ßn b·ªã l·ªói
                // Component s·∫Ω c·∫ßn ki·ªÉm tra v√† hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p n·∫øu data l√† m·∫£ng r·ªóng do l·ªói
                finalLoaderData[key] = [];
                overallSuccess = false; // ƒê√°nh d·∫•u c√≥ l·ªói x·∫£y ra
            } else {
                // G√°n d·ªØ li·ªáu th√†nh c√¥ng
                finalLoaderData[key] = result.data;
            }
        });

        // 5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ cu·ªëi c√πng
        if (!overallSuccess) {
            console.warn("‚ö†Ô∏è [Loader] Finished with one or more errors.");
            return {
                error: true,
                type: 'partial_api_network', // L·ªói m·ªôt ph·∫ßn
                // Gom c√°c l·ªói l·∫°i th√†nh 1 message
                message: `G·∫∑p l·ªói khi t·∫£i d·ªØ li·ªáu dashboard: ${collectedErrors.join('; ')}`,
                // Lu√¥n tr·∫£ v·ªÅ c·∫•u tr√∫c data, ch·ª©a c·∫£ ph·∫ßn th√†nh c√¥ng v√† ph·∫ßn l·ªói (ƒë√£ ƒë∆∞·ª£c g√°n default)
                data: finalLoaderData
            };
        }

        console.log("‚úÖ [Loader] All dashboard data fetched successfully.");
        // Tr·∫£ v·ªÅ c·∫•u tr√∫c { data: { ... } } nh·∫•t qu√°n v·ªõi maytinhLoader
        return { data: finalLoaderData };

    } catch (error) {
        // L·ªói n√†y ch·ªâ x·∫£y ra n·∫øu c√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng trong logic c·ªßa ch√≠nh loader
        // (v√≠ d·ª•: l·ªói c√∫ ph√°p trong map, l·ªói kh√¥ng mong mu·ªën t·ª´ Promise.all)
        console.error("üí• [Loader] Unexpected error during Promise.all or processing:", error);
        return {
            error: true,
            type: 'loader_unexpected',
            message: `L·ªói kh√¥ng mong mu·ªën trong loader: ${error.message || 'Unknown loader error'}`
        };
    }
}